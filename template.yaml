AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BNDY Platform Serverless API - Lambda Functions + API Gateway (Redeploying)

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Tracing: Active
    Environment:
      Variables:
        NODE_ENV: production
        JWT_SECRET: 2c7fccb87d98f68d36b19d528aa81a61afacf91058c18ee49738c35b50b81aa5
        _X_AMZN_TRACE_ID: !Ref "AWS::NoValue"

Parameters:
  Stage:
    Type: String
    Default: prod
    Description: Deployment stage (dev, staging, prod)

Resources:
  # API Gateway - HTTP API v2 (modern, auto-CORS, 70% cheaper)
  BndyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins:
          - https://backstage.bndy.co.uk
          - https://d3cewujswmjafa.cloudfront.net
        AllowHeaders:
          - Content-Type
          - Authorization
          - Cookie
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowCredentials: true
        MaxAge: 300

  # Venues Lambda Function
  VenuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: venues-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Venues API - handles /api/venues endpoints
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetAllVenues:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/venues
            Method: get
        GetVenueById:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/venues/{id}
            Method: get
        CreateVenue:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/venues
            Method: post
        UpdateVenue:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/venues/{id}
            Method: put
        DeleteVenue:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/venues/{id}
            Method: delete

  # Auth Lambda Function
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Authentication API - handles OAuth and sessions
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        AuthGoogle:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /auth/google
            Method: get
        AuthCallback:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /auth/callback
            Method: get
        ApiMe:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/me
            Method: get
        AuthLogout:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /auth/logout
            Method: post
        AuthLanding:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /auth/landing
            Method: get

  # Users Lambda Function
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Users API - handles user profile management
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetUserProfile:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /users/profile
            Method: get
        UpdateUserProfile:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /users/profile
            Method: put
        ListUsers:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /users
            Method: get

  # Events Lambda Function
  EventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Events API - handles calendar and event management
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetPublicEvents:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/events
            Method: get
        CreateEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /admin/events
            Method: post
        UpdateEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /admin/events/{id}
            Method: put
        DeleteEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /admin/events/{id}
            Method: delete
        GetBandEvents:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /admin/events/band/{bandId}
            Method: get

  # Artists Lambda Function
  ArtistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: artists-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Artists API - handles /api/artists endpoints
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetAllArtists:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists
            Method: get
        GetArtistById:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists/{id}
            Method: get
        CreateArtist:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists
            Method: post
        UpdateArtist:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists/{id}
            Method: put
        DeleteArtist:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists/{id}
            Method: delete

  # Songs Lambda Function
  SongsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: songs-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Songs API - handles /api/songs endpoints
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetAllSongs:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/songs
            Method: get
        GetSongById:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/songs/{id}
            Method: get
        CreateSong:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/songs
            Method: post
        UpdateSong:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/songs/{id}
            Method: put
        DeleteSong:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/songs/{id}
            Method: delete

  # NOTE: IssuesFunction and UploadsFunction deployed manually outside CF stack
  # They are operational and managed independently

  # Memberships Lambda Function
  MembershipsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: memberships-lambda/
      Handler: handler.handler
      MemorySize: 512
      Description: BNDY Memberships API - handles artist membership management
      Role: arn:aws:iam::771551874768:role/bndy-api-instance-role
      Events:
        GetArtistMembers:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists/{artistId}/members
            Method: get
        AddArtistMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/artists/{artistId}/members
            Method: post
        UpdateMembership:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/memberships/{membershipId}
            Method: put
        DeleteMembership:
          Type: HttpApi
          Properties:
            ApiId: !Ref BndyHttpApi
            Path: /api/memberships/{membershipId}
            Method: delete

  # DynamoDB Tables
  # NOTE: bndy-issues table deployed manually outside CF stack

  ArtistMembershipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bndy-artist-memberships
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: membership_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: artist_id
          AttributeType: S
      KeySchema:
        - AttributeName: membership_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: artist_id-index
          KeySchema:
            - AttributeName: artist_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Project
          Value: BNDY
        - Key: Environment
          Value: !Ref Stage
        - Key: Component
          Value: Memberships

  # CloudWatch Log Groups with retention
  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthFunction}"
      RetentionInDays: 30

  UsersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UsersFunction}"
      RetentionInDays: 30

  EventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EventsFunction}"
      RetentionInDays: 30

  VenuesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${VenuesFunction}"
      RetentionInDays: 30

  ArtistsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ArtistsFunction}"
      RetentionInDays: 30

  SongsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SongsFunction}"
      RetentionInDays: 30

  MembershipsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MembershipsFunction}"
      RetentionInDays: 30

  # NOTE: IssuesLogGroup and UploadsLogGroup for manually deployed functions

  # CloudWatch Alarms for Lambda Errors
  AuthErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-AuthFunction-Errors"
      AlarmDescription: "Alarm for Auth Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthFunction

Outputs:
  BndyHttpApi:
    Description: "HTTP API Gateway endpoint URL for BNDY API"
    Value: !Sub "https://${BndyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
    Export:
      Name: !Sub "${AWS::StackName}-HttpApiUrl"

  VenuesFunctionArn:
    Description: "Venues Lambda Function ARN"
    Value: !GetAtt VenuesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-VenuesFunctionArn"

  AuthFunctionArn:
    Description: "Auth Lambda Function ARN"
    Value: !GetAtt AuthFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AuthFunctionArn"

  UsersFunctionArn:
    Description: "Users Lambda Function ARN"
    Value: !GetAtt UsersFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UsersFunctionArn"

  ArtistsFunctionArn:
    Description: "Artists Lambda Function ARN"
    Value: !GetAtt ArtistsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ArtistsFunctionArn"

  SongsFunctionArn:
    Description: "Songs Lambda Function ARN"
    Value: !GetAtt SongsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SongsFunctionArn"

  # NOTE: IssuesFunction and IssuesTable outputs removed (deployed manually)

  # Log Group Names for easy access
  AuthLogGroupName:
    Description: "Auth Lambda CloudWatch Log Group Name"
    Value: !Ref AuthLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-AuthLogGroup"

  UsersLogGroupName:
    Description: "Users Lambda CloudWatch Log Group Name"
    Value: !Ref UsersLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-UsersLogGroup"

  EventsLogGroupName:
    Description: "Events Lambda CloudWatch Log Group Name"
    Value: !Ref EventsLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-EventsLogGroup"